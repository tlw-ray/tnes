From: "Saved by Windows Internet Explorer 9"
Subject: www.6502.org: Tutorials and Aids
Date: Mon, 20 Feb 2012 13:08:58 +0800
MIME-Version: 1.0
Content-Type: text/html;
	charset="gb2312"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.6502.org/tutorials/6502opcodes.html
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7601.17609

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>www.6502.org: Tutorials and Aids</TITLE>
<META content=3D"text/html; charset=3Dgb2312" http-equiv=3DContent-Type>
<META content=3D"text/html; charset=3Diso-8859-1" =
http-equiv=3DContext-Type>
<META name=3Ddescription=20
content=3D"Learn how to do all kinds of things&#10;with the 6502 =
microprocessor.">
<STYLE>A:unknown {
	COLOR: #000099
}
A:unknown {
	COLOR: #000099
}
A:hover {
	COLOR: #007fff
}
</STYLE>

<META name=3DGENERATOR content=3D"MSHTML 9.00.8112.16440"></HEAD>
<BODY background=3D"" text=3D#000000 vLink=3D#000099 link=3D#000099><A=20
href=3D"http://www.6502.org/index.html"><IMG border=3D0 alt=3D"[Return =
to Main Page]"=20
align=3Dright src=3D""></A> <FONT size=3D+1>NMOS 6502 =
Opcodes</FONT>&nbsp;<FONT=20
size=3D-1>by John Pickens, Updated by Bruce Clark</FONT> <BR><A=20
href=3D"http://www.6502.org/tutorials/tutorials.htm">[Up to Tutorials =
and=20
Aids]</A> <BR>
<HR>

<H2>INDEX</H2></A>
<P><TT>
<TABLE border=3D2 cellPadding=3D2 width=3D"90%">
  <TBODY>
  <TR>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#BRA">Branches</A><=
/TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#DFLAG">Decimal=20
      Mode</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#IFLAG">Interrupt=20
      Flag</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#VFLAG">Overflow=20
      Flag</A></TD>
    <TD align=3Dcenter><A=20
      href=3D"http://www.6502.org/tutorials/6502opcodes.html#PC">Program =

      Counter</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#STACK">Stack</A></=
TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#TIMES">Times</A></=
TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#WRAP">Wrap-around<=
/A></TD></TR></TBODY></TABLE>
<P>
<TABLE border=3D2 cellPadding=3D2 width=3D"90%">
  <TBODY>
  <TR>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#ADC">ADC</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#AND">AND</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#ASL">ASL</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#BCC">BCC</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#BCS">BCS</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#BEQ">BEQ</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#BIT">BIT</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#BMI">BMI</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#BNE">BNE</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#BPL">BPL</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#BRK">BRK</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#BVC">BVC</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#BVS">BVS</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#CLC">CLC</A></TD><=
/TR>
  <TR>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#CLD">CLD</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#CLI">CLI</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#CLV">CLV</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#CMP">CMP</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#CPX">CPX</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#CPY">CPY</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#DEC">DEC</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#DEX">DEX</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#DEY">DEY</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#EOR">EOR</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#INC">INC</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#INX">INX</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#INY">INY</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#JMP">JMP</A></TD><=
/TR>
  <TR>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#JSR">JSR</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#LDA">LDA</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#LDX">LDX</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#LDY">LDY</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#LSR">LSR</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#NOP">NOP</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#ORA">ORA</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#PHA">PHA</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#PHP">PHP</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#PLA">PLA</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#PLP">PLP</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#ROL">ROL</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#ROR">ROR</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#RTI">RTI</A></TD><=
/TR>
  <TR>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#RTS">RTS</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#SBC">SBC</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#SEC">SEC</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#SED">SED</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#SEI">SEI</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#STA">STA</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#STX">STX</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#STY">STY</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#TAX">TAX</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#TAY">TAY</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#TSX">TSX</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#TXA">TXA</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#TXS">TXS</A></TD>
    <TD align=3Dcenter><A=20
      =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#TYA">TYA</A></TD><=
/TR></TBODY></TABLE></TT>
<P><A name=3DADC></A>=20
<H2>ADC (ADd with Carry)</H2>
<P>Affects Flags: S V Z C <PRE>MODE           SYNTAX       HEX LEN TIM
Immediate     ADC #$44      $69  2   2
Zero Page     ADC $44       $65  2   3
Zero Page,X   ADC $44,X     $75  2   4
Absolute      ADC $4400     $6D  3   4
Absolute,X    ADC $4400,X   $7D  3   4+
Absolute,Y    ADC $4400,Y   $79  3   4+
Indirect,X    ADC ($44,X)   $61  2   6
Indirect,Y    ADC ($44),Y   $71  2   5+

+ add 1 cycle if page boundary crossed

</PRE>ADC results are dependant on the setting of the <A=20
href=3D"http://www.6502.org/tutorials/6502opcodes.html#DFLAG">decimal =
flag</A>. In=20
decimal mode, addition is carried out on the assumption that the values =
involved=20
are packed BCD (Binary Coded Decimal).=20
<P>There is no way to add without carry.=20
<P><A name=3DAND></A>=20
<H2>AND (bitwise AND with accumulator) </H2>
<P>Affects Flags: S Z <PRE>MODE           SYNTAX       HEX LEN TIM
Immediate     AND #$44      $29  2   2
Zero Page     AND $44       $25  2   2
Zero Page,X   AND $44,X     $35  2   3
Absolute      AND $4400     $2D  3   4
Absolute,X    AND $4400,X   $3D  3   4+
Absolute,Y    AND $4400,Y   $39  3   4+
Indirect,X    AND ($44,X)   $21  2   6
Indirect,Y    AND ($44),Y   $31  2   5+

+ add 1 cycle if page boundary crossed
</PRE>
<P><A name=3DASL></A>=20
<H2>ASL (Arithmetic Shift Left) </H2>
<P>Affects Flags: S Z C <PRE>MODE           SYNTAX       HEX LEN TIM
Accumulator   ASL A         $0A  1   2
Zero Page     ASL $44       $06  2   5
Zero Page,X   ASL $44,X     $16  2   6
Absolute      ASL $4400     $0E  3   6
Absolute,X    ASL $4400,X   $1E  3   7

</PRE>ASL shifts all bits left one position. 0 is shifted into bit 0 and =
the=20
original bit 7 is shifted into the Carry.=20
<P>
<P><A name=3DBIT></A>=20
<H2>BIT (test BITs) </H2>
<P>Affects Flags: N V Z <PRE>MODE           SYNTAX       HEX LEN TIM
Zero Page     BIT $44       $24  2   3
Absolute      BIT $4400     $2C  3   4

</PRE>BIT sets the Z flag as though the value in the address tested were =
ANDed=20
with the accumulator. The S and V flags are set to match bits 7 and 6=20
respectively in the value stored at the tested address.=20
<P>BIT is often used to skip one or two following bytes as in:=20
<P><PRE>CLOSE1 LDX #$10   If entered here, we
       .BYTE $2C  effectively perform
CLOSE2 LDX #$20   a BIT test on $20A2,
       .BYTE $2C  another one on $30A2,
CLOSE3 LDX #$30   and end up with the X
CLOSEX LDA #12    register still at $10
       STA ICCOM,X upon arrival here.

</PRE>
<P><A name=3DBCC>&nbsp;</A> <A name=3DBCS>&nbsp;</A> <A =
name=3DBEQ>&nbsp;</A> <A=20
name=3DBNE>&nbsp;</A> <A name=3DBMI>&nbsp;</A> <A name=3DBPL>&nbsp;</A> =
<A=20
name=3DBVC>&nbsp;</A> <A name=3DBVS>&nbsp;</A> <A name=3DBRA>&nbsp;</A>=20
<H2>Branch Instructions</H2>
<P>Affect Flags: none=20
<P>All branches are relative mode and have a length of two bytes. Syntax =
is "Bxx=20
Displacement" or (better) "Bxx Label". See the notes on the <A=20
href=3D"http://www.6502.org/tutorials/6502opcodes.html#PC">Program =
Counter</A> for=20
more on displacements.=20
<P>Branches are dependant on the status of the flag bits when the op =
code is=20
encountered. A branch not taken requires two machine cycles. Add one if =
the=20
branch is taken and add one more if the branch crosses a page boundary. =
<PRE>MNEMONIC                       HEX
BPL (Branch on PLus)           $10
BMI (Branch on MInus)          $30
BVC (Branch on oVerflow Clear) $50
BVS (Branch on oVerflow Set)   $70
BCC (Branch on Carry Clear)    $90
BCS (Branch on Carry Set)      $B0
BNE (Branch on Not Equal)      $D0
BEQ (Branch on EQual)          $F0

</PRE>There is no BRA (BRanch Always) instruction but it can be easily =
emulated=20
by branching on the basis of a known condition. One of the best flags to =
use for=20
this purpose is the <A=20
href=3D"http://www.6502.org/tutorials/6502opcodes.html#VFLAG">oVerflow</A=
> which=20
is unchanged by all but addition and subtraction operations.=20
<P>A page boundary crossing occurs when the branch destination is on a =
different=20
page than the instruction AFTER the branch instruction. For example: =
<PRE>  SEC
  BCS LABEL
  NOP
</PRE>A page boundary crossing occurs (i.e. the BCS takes 4 cycles) when =
(the=20
address of) LABEL and the NOP are on different pages. This means that =
<PRE>        CLV
        BVC LABEL
  LABEL NOP
</PRE>the BVC instruction will take 3 cycles no matter what address it =
is=20
located at.=20
<P>
<P><A name=3DBRK></A>=20
<H2>BRK (BReaK) </H2>
<P>Affects Flags: B <PRE>MODE           SYNTAX       HEX LEN TIM
Implied       BRK           $00  1   7

</PRE>BRK causes a non-maskable interrupt and increments the program =
counter by=20
one. Therefore an <A=20
href=3D"http://www.6502.org/tutorials/6502opcodes.html#RTI">RTI</A> will =
go to the=20
address of the BRK +2 so that BRK may be used to replace a two-byte =
instruction=20
for debugging and the subsequent RTI will be correct.=20
<P>
<P><A name=3DCMP></A>=20
<H2>CMP (CoMPare accumulator) </H2>
<P>Affects Flags: S Z C <PRE>MODE           SYNTAX       HEX LEN TIM
Immediate     CMP #$44      $C9  2   2
Zero Page     CMP $44       $C5  2   3
Zero Page,X   CMP $44,X     $D5  2   4
Absolute      CMP $4400     $CD  3   4
Absolute,X    CMP $4400,X   $DD  3   4+
Absolute,Y    CMP $4400,Y   $D9  3   4+
Indirect,X    CMP ($44,X)   $C1  2   6
Indirect,Y    CMP ($44),Y   $D1  2   5+

+ add 1 cycle if page boundary crossed

</PRE>Compare sets flags as if a subtraction had been carried out. If =
the value=20
in the accumulator is equal or greater than the compared value, the =
Carry will=20
be set. The equal (Z) and sign (S) flags will be set based on equality =
or lack=20
thereof and the sign (i.e. A&gt;=3D$80) of the accumulator.=20
<P>
<P><A name=3DCPX></A>=20
<H2>CPX (ComPare X register) </H2>
<P>Affects Flags: S Z C <PRE>MODE           SYNTAX       HEX LEN TIM
Immediate     CPX #$44      $E0  2   2
Zero Page     CPX $44       $E4  2   3
Absolute      CPX $4400     $EC  3   4

</PRE>Operation and flag results are identical to equivalent mode =
accumulator <A=20
href=3D"http://www.6502.org/tutorials/6502opcodes.html#CMP">CMP</A> ops. =

<P>
<P><A name=3DCPY></A>=20
<H2>CPY (ComPare Y register) </H2>
<P>Affects Flags: S Z C <PRE>MODE           SYNTAX       HEX LEN TIM
Immediate     CPY #$44      $C0  2   2
Zero Page     CPY $44       $C4  2   3
Absolute      CPY $4400     $CC  3   4

</PRE>Operation and flag results are identical to equivalent mode =
accumulator <A=20
href=3D"http://www.6502.org/tutorials/6502opcodes.html#CMP">CMP</A> ops. =

<P>
<P><A name=3DDEC></A>=20
<H2>DEC (DECrement memory) </H2>
<P>Affects Flags: S Z <PRE>MODE           SYNTAX       HEX LEN TIM
Zero Page     DEC $44       $C6  2   5
Zero Page,X   DEC $44,X     $D6  2   6
Absolute      DEC $4400     $CE  3   6
Absolute,X    DEC $4400,X   $DE  3   7

</PRE>
<P><A name=3DEOR></A>=20
<H2>EOR (bitwise Exclusive OR) </H2>
<P>Affects Flags: S Z <PRE>MODE           SYNTAX       HEX LEN TIM
Immediate     EOR #$44      $49  2   2
Zero Page     EOR $44       $45  2   3
Zero Page,X   EOR $44,X     $55  2   4
Absolute      EOR $4400     $4D  3   4
Absolute,X    EOR $4400,X   $5D  3   4+
Absolute,Y    EOR $4400,Y   $59  3   4+
Indirect,X    EOR ($44,X)   $41  2   6
Indirect,Y    EOR ($44),Y   $51  2   5+

+ add 1 cycle if page boundary crossed
</PRE>
<P><A name=3DCLC>&nbsp;</A> <A name=3DSEC>&nbsp;</A> <A =
name=3DCLD>&nbsp;</A> <A=20
name=3DSED>&nbsp;</A> <A name=3DCLI>&nbsp;</A> <A name=3DSEI>&nbsp;</A> =
<A=20
name=3DCLV>&nbsp;</A>=20
<H2>Flag (Processor Status) Instructions</H2>
<P>Affect Flags: as noted=20
<P>These instructions are implied mode, have a length of one byte and =
require=20
two machine cycles. <PRE>MNEMONIC                       HEX
CLC (CLear Carry)              $18
SEC (SEt Carry)                $38
CLI (CLear Interrupt)          $58
SEI (SEt Interrupt)            $78
CLV (CLear oVerflow)           $B8
CLD (CLear Decimal)            $D8
SED (SEt Decimal)              $F8

</PRE>Notes:=20
<P><A name=3DIFLAG>&nbsp;</A> The Interrupt flag is used to prevent =
(SEI) or=20
enable (CLI) maskable interrupts (aka IRQ's). It does not signal the =
presence or=20
absence of an interrupt condition. The 6502 will set this flag =
automatically in=20
response to an interrupt and restore it to its prior status on =
completion of the=20
interrupt service routine. If you want your interrupt service routine to =
permit=20
other maskable interrupts, you must clear the I flag in your code.=20
<P><A name=3DDFLAG>&nbsp;</A> The Decimal flag controls how the 6502 =
adds and=20
subtracts. If set, arithmetic is carried out in packed binary coded =
decimal.=20
This flag is unchanged by interrupts and is unknown on power-up. The =
implication=20
is that a CLD should be included in boot or interrupt coding.=20
<P><A name=3DVFLAG>&nbsp;</A> The Overflow flag is generally =
misunderstood and=20
therefore under-utilised. After an ADC or SBC instruction, the overflow =
flag=20
will be set if the twos complement result is less than -128 or greater =
than=20
+127, and it will cleared otherwise. In twos complement, $80 through $FF =

represents -128 through -1, and $00 through $7F represents 0 through =
+127. Thus,=20
after: <PRE>  =20
  CLC
  LDA #$7F ;   +127
  ADC #$01 ; +   +1
</PRE>the overflow flag is 1 (+127 + +1 =3D +128), and after: <PRE>  CLC
  LDA #$81 ;   -127
  ADC #$FF ; +   -1
</PRE>the overflow flag is 0 (-127 + -1 =3D -128). The overflow flag is =
not=20
affected by increments, decrements, shifts and logical operations i.e. =
only ADC,=20
BIT, CLV, PLP, RTI and SBC affect it. There is no op code to set the =
overflow=20
but a BIT test on an RTS instruction will do the trick.=20
<P>
<P>
<P><A name=3DINC></A>=20
<H2>INC (INCrement memory) </H2>
<P>Affects Flags: S Z <PRE>MODE           SYNTAX       HEX LEN TIM
Zero Page     INC $44       $E6  2   5
Zero Page,X   INC $44,X     $F6  2   6
Absolute      INC $4400     $EE  3   6
Absolute,X    INC $4400,X   $FE  3   7
</PRE>
<P>
<P>
<P><A name=3DJMP></A>=20
<H2>JMP (JuMP) </H2>
<P>Affects Flags: none <PRE>MODE           SYNTAX       HEX LEN TIM
Absolute      JMP $5597     $4C  3   3=20
Indirect      JMP ($5597)   $6C  3   5=20

</PRE>JMP transfers program execution to the following address =
(absolute) or to=20
the location contained in the following address (indirect). Note that =
there is=20
no carry associated with the indirect jump so: <PRE><H3>AN INDIRECT JUMP =
MUST NEVER USE A</H3>
<H3>VECTOR BEGINNING ON THE LAST BYTE</H3>
<H3>OF A PAGE</H3>
</PRE>For example if address $3000 contains $40, $30FF contains $80, and =
$3100=20
contains $50, the result of JMP ($30FF) will be a transfer of control to =
$4080=20
rather than $5080 as you intended i.e. the 6502 took the low byte of the =
address=20
from $30FF and the high byte from $3000.=20
<P>
<P>
<P><A name=3DJSR></A>=20
<H2>JSR (Jump to SubRoutine) </H2>
<P>Affects Flags: none <PRE>MODE           SYNTAX       HEX LEN TIM
Absolute      JSR $5597     $20  3   6=20

</PRE>JSR pushes the address-1 of the next operation on to the stack =
before=20
transferring program control to the following address. Subroutines are =
normally=20
terminated by a <A=20
href=3D"http://www.6502.org/tutorials/6502opcodes.html#RTS">RTS</A> op =
code.=20
<P>
<P>
<P><A name=3DLDA></A>=20
<H2>LDA (LoaD Accumulator) </H2>
<P>Affects Flags: S Z <PRE>MODE           SYNTAX       HEX LEN TIM
Immediate     LDA #$44      $A9  2   2
Zero Page     LDA $44       $A5  2   3
Zero Page,X   LDA $44,X     $B5  2   4
Absolute      LDA $4400     $AD  3   4
Absolute,X    LDA $4400,X   $BD  3   4+
Absolute,Y    LDA $4400,Y   $B9  3   4+
Indirect,X    LDA ($44,X)   $A1  2   6
Indirect,Y    LDA ($44),Y   $B1  2   5+

+ add 1 cycle if page boundary crossed
</PRE>
<P>
<P>
<P><A name=3DLDX></A>=20
<H2>LDX (LoaD X register) </H2>
<P>Affects Flags: S Z <PRE>MODE           SYNTAX       HEX LEN TIM
Immediate     LDX #$44      $A2  2   2
Zero Page     LDX $44       $A6  2   3
Zero Page,Y   LDX $44,Y     $B6  2   4
Absolute      LDX $4400     $AE  3   4
Absolute,Y    LDX $4400,Y   $BE  3   4+

+ add 1 cycle if page boundary crossed
</PRE>
<P>
<P>
<P><A name=3DLDY></A>=20
<H2>LDY (LoaD Y register) </H2>
<P>Affects Flags: S Z <PRE>MODE           SYNTAX       HEX LEN TIM
Immediate     LDY #$44      $A0  2   2
Zero Page     LDY $44       $A4  2   3
Zero Page,X   LDY $44,X     $B4  2   4
Absolute      LDY $4400     $AC  3   4
Absolute,X    LDY $4400,X   $BC  3   4+

+ add 1 cycle if page boundary crossed
</PRE>
<P>
<P>
<P><A name=3DLSR></A>=20
<H2>LSR (Logical Shift Right) </H2>
<P>Affects Flags: S Z C <PRE>MODE           SYNTAX       HEX LEN TIM
Accumulator   LSR A         $4A  1   2
Zero Page     LSR $44       $46  2   5
Zero Page,X   LSR $44,X     $56  2   6
Absolute      LSR $4400     $4E  3   6
Absolute,X    LSR $4400,X   $5E  3   7

</PRE>LSR shifts all bits right one position. 0 is shifted into bit 7 =
and the=20
original bit 0 is shifted into the Carry.=20
<P>
<P>
<P><A name=3DWRAP></A>=20
<H2>Wrap-Around</H2>
<P>Use caution with indexed zero page operations as they are subject to=20
wrap-around. For example, if the X register holds $FF and you execute =
LDA $80,X=20
you will not access $017F as you might expect; instead you access $7F =
i.e.=20
$80-1. This characteristic can be used to advantage but make sure your =
code is=20
well commented.=20
<P>It is possible, however, to access $017F when X =3D $FF by using the =
Absolute,X=20
addressing mode of LDA $80,X. That is, instead of: <PRE>  LDA $80,X    ; =
ZeroPage,X - the resulting object code is: B5 80
</PRE>which accesses $007F when X=3D$FF, use: <PRE>  LDA $0080,X  ; =
Absolute,X - the resulting object code is: BD 80 00
</PRE>which accesses $017F when X =3D $FF (a at cost of one additional =
byte and=20
one additional cycle). All of the ZeroPage,X and ZeroPage,Y instructions =
except=20
STX ZeroPage,Y and STY ZeroPage,X have a corresponding Absolute,X and =
Absolute,Y=20
instruction. Unfortunately, a lot of 6502 assemblers don't have an easy =
way to=20
force Absolute addressing, i.e. most will assemble a LDA $0080,X as B5 =
80. One=20
way to overcome this is to insert the bytes using the .BYTE pseudo-op =
(on some=20
6502 assemblers this pseudo-op is called DB or DFB, consult the =
assembler=20
documentation) as follows: <PRE>  .BYTE $BD,$80,$00  ; LDA $0080,X =
(absolute,X addressing mode)
</PRE>The comment is optional, but highly recommended for clarity.=20
<P>In cases where you are writing code that will be relocated you must =
consider=20
wrap-around when assigning dummy values for addresses that will be =
adjusted.=20
Both zero and the semi-standard $FFFF should be avoided for dummy =
labels. The=20
use of zero or zero page values will result in assembled code with zero =
page=20
opcodes when you wanted absolute codes. With $FFFF, the problem is in=20
addresses+1 as you wrap around to page 0.=20
<P><A name=3DPC></A>=20
<H2>Program Counter</H2>
<P>When the 6502 is ready for the next instruction it increments the =
program=20
counter before fetching the instruction. Once it has the op code, it =
increments=20
the program counter by the length of the operand, if any. This must be =
accounted=20
for when calculating branches or when pushing bytes to create a false =
return=20
address (i.e. jump table addresses are made up of addresses-1 when it is =

intended to use an RTS rather than a JMP).=20
<P>The program counter is loaded least signifigant byte first. Therefore =
the=20
most signifigant byte must be pushed first when creating a false return =
address.=20

<P>When calculating branches a forward branch of 6 skips the following 6 =
bytes=20
so, effectively the program counter points to the address that is 8 =
bytes beyond=20
the address of the branch opcode; and a backward branch of $FA (256-6) =
goes to=20
an address 4 bytes before the branch instruction.=20
<P><A name=3DTIMES></A>=20
<H2>Execution Times</H2>
<P>Op code execution times are measured in machine cycles; one machine =
cycle=20
equals one clock cycle. Many instructions require one extra cycle for =
execution=20
if a page boundary is crossed; these are indicated by a + following the =
time=20
values shown.=20
<P>
<P>
<P><A name=3DNOP></A>=20
<H2>NOP (No OPeration) </H2>
<P>Affects Flags: none <PRE>MODE           SYNTAX       HEX LEN TIM
Implied       NOP           $EA  1   2

</PRE>NOP is used to reserve space for future modifications or =
effectively REM=20
out existing code.=20
<P>
<P>
<P><A name=3DORA></A>=20
<H2>ORA (bitwise OR with Accumulator) </H2>
<P>Affects Flags: S Z <PRE>MODE           SYNTAX       HEX LEN TIM
Immediate     ORA #$44      $09  2   2
Zero Page     ORA $44       $05  2   2
Zero Page,X   ORA $44,X     $15  2   3
Absolute      ORA $4400     $0D  3   4
Absolute,X    ORA $4400,X   $1D  3   4+
Absolute,Y    ORA $4400,Y   $19  3   4+
Indirect,X    ORA ($44,X)   $01  2   6
Indirect,Y    ORA ($44),Y   $11  2   5+

+ add 1 cycle if page boundary crossed
</PRE>
<P>
<P>
<P><A name=3DTAX>&nbsp;</A> <A name=3DTXA>&nbsp;</A> <A =
name=3DTAY>&nbsp;</A> <A=20
name=3DTYA>&nbsp;</A> <A name=3DINX>&nbsp;</A> <A name=3DDEX>&nbsp;</A> =
<A=20
name=3DINY>&nbsp;</A> <A name=3DDEY>&nbsp;</A>=20
<H2>Register Instructions </H2>
<P>Affect Flags: S Z=20
<P>These instructions are implied mode, have a length of one byte and =
require=20
two machine cycles. <PRE>MNEMONIC                 HEX
TAX (Transfer A to X)    $AA
TXA (Transfer X to A)    $8A
DEX (DEcrement X)        $CA
INX (INcrement X)        $E8
TAY (Transfer A to Y)    $A8
TYA (Transfer Y to A)    $98
DEY (DEcrement Y)        $88
INY (INcrement Y)        $C8
</PRE>
<P>
<P>
<P><A name=3DROL></A>=20
<H2>ROL (ROtate Left) </H2>
<P>Affects Flags: S Z C <PRE>MODE           SYNTAX       HEX LEN TIM
Accumulator   ROL A         $2A  1   2
Zero Page     ROL $44       $26  2   5
Zero Page,X   ROL $44,X     $36  2   6
Absolute      ROL $4400     $2E  3   6
Absolute,X    ROL $4400,X   $3E  3   7

</PRE>ROL shifts all bits left one position. The Carry is shifted into =
bit 0 and=20
the original bit 7 is shifted into the Carry.=20
<P>
<P>
<P><A name=3DROR></A>=20
<H2>ROR (ROtate Right) </H2>
<P>Affects Flags: S Z C <PRE>MODE           SYNTAX       HEX LEN TIM
Accumulator   ROR A         $6A  1   2
Zero Page     ROR $44       $66  2   5
Zero Page,X   ROR $44,X     $76  2   6
Absolute      ROR $4400     $6E  3   6
Absolute,X    ROR $4400,X   $7E  3   7

</PRE>ROR shifts all bits right one position. The Carry is shifted into =
bit 7=20
and the original bit 0 is shifted into the Carry.=20
<P>
<P>
<P><A name=3DRTI></A>=20
<H2>RTI (ReTurn from Interrupt) </H2>
<P>Affects Flags: all <PRE>MODE           SYNTAX       HEX LEN TIM
Implied       RTI           $40  1   6

</PRE>RTI retrieves the Processor Status Word (flags) and the Program =
Counter=20
from the stack in that order (interrupts push the PC first and then the =
PSW).=20
<P>Note that unlike RTS, the return address on the stack is the actual =
address=20
rather than the address-1.=20
<P>
<P>
<P><A name=3DRTS></A>=20
<H2>RTS (ReTurn from Subroutine) </H2>
<P>Affects Flags: none <PRE>MODE           SYNTAX       HEX LEN TIM
Implied       RTS           $60  1   6=20

</PRE>RTS pulls the top two bytes off the stack (low byte first) and =
transfers=20
program control to that address+1. It is used, as expected, to exit a =
subroutine=20
invoked via <A =
href=3D"http://www.6502.org/tutorials/6502opcodes.html#JSR">JSR</A>=20
which pushed the address-1.=20
<P>RTS is frequently used to implement a jump table where addresses-1 =
are pushed=20
onto the stack and accessed via RTS eg. to access the second of four =
routines: <PRE> LDX #1
 JSR EXEC
 JMP SOMEWHERE

LOBYTE
 .BYTE &lt;ROUTINE0-1,&lt;ROUTINE1-1
 .BYTE &lt;ROUTINE2-1,&lt;ROUTINE3-1

HIBYTE
 .BYTE &gt;ROUTINE0-1,&gt;ROUTINE1-1
 .BYTE &gt;ROUTINE2-1,&gt;ROUTINE3-1

EXEC
 LDA HIBYTE,X
 PHA
 LDA LOBYTE,X
 PHA
 RTS
</PRE>
<P>
<P><A name=3DSBC></A>=20
<H2>SBC (SuBtract with Carry)</H2>
<P>Affects Flags: S V Z C <PRE>MODE           SYNTAX       HEX LEN TIM
Immediate     SBC #$44      $E9  2   2
Zero Page     SBC $44       $E5  2   3
Zero Page,X   SBC $44,X     $F5  2   4
Absolute      SBC $4400     $ED  3   4
Absolute,X    SBC $4400,X   $FD  3   4+
Absolute,Y    SBC $4400,Y   $F9  3   4+
Indirect,X    SBC ($44,X)   $E1  2   6
Indirect,Y    SBC ($44),Y   $F1  2   5+

+ add 1 cycle if page boundary crossed

</PRE>SBC results are dependant on the setting of the decimal flag. In =
decimal=20
mode, subtraction is carried out on the assumption that the values =
involved are=20
packed BCD (Binary Coded Decimal).=20
<P>There is no way to subtract without the carry which works as an =
inverse=20
borrow. i.e, to subtract you set the carry before the operation. If the =
carry is=20
cleared by the operation, it indicates a borrow occurred.=20
<P>
<P>
<P><A name=3DSTA></A>=20
<H2>STA (STore Accumulator) </H2>
<P>Affects Flags: none <PRE>MODE           SYNTAX       HEX LEN TIM
Zero Page     STA $44       $85  2   3
Zero Page,X   STA $44,X     $95  2   4
Absolute      STA $4400     $8D  3   4
Absolute,X    STA $4400,X   $9D  3   5
Absolute,Y    STA $4400,Y   $99  3   5
Indirect,X    STA ($44,X)   $81  2   6
Indirect,Y    STA ($44),Y   $91  2   6
</PRE>
<P>
<P><A name=3DTXS>&nbsp;</A> <A name=3DTSX>&nbsp;</A> <A =
name=3DPHA>&nbsp;</A> <A=20
name=3DPLA>&nbsp;</A> <A name=3DPHP>&nbsp;</A> <A name=3DPLP>&nbsp;</A> =
<A=20
name=3DSTACK>&nbsp;</A>=20
<H2>Stack Instructions</H2>
<P>These instructions are implied mode, have a length of one byte and =
require=20
machine cycles as indicated. The "PuLl" operations are known as "POP" on =
most=20
other microprocessors. With the 6502, the stack is always on page one=20
($100-$1FF) and works top down. <PRE>MNEMONIC                        HEX =
TIM
TXS (Transfer X to Stack ptr)   $9A  2=20
TSX (Transfer Stack ptr to X)   $BA  2=20
PHA (PusH Accumulator)          $48  3=20
PLA (PuLl Accumulator)          $68  4=20
PHP (PusH Processor status)     $08  3=20
PLP (PuLl Processor status)     $28  4=20
</PRE>
<P>
<P>
<P><A name=3DSTX></A>=20
<H2>STX (STore X register)</H2>
<P>Affects Flags: none <PRE>MODE           SYNTAX       HEX LEN TIM
Zero Page     STX $44       $86  2   3
Zero Page,Y   STX $44,Y     $96  2   4
Absolute      STX $4400     $8E  3   4
</PRE>
<P>
<P>
<P><A name=3DSTY></A>=20
<H2>STY (STore Y register)</H2>
<P>Affects Flags: none <PRE>MODE           SYNTAX       HEX LEN TIM
Zero Page     STY $44       $84  2   3
Zero Page,X   STY $44,X     $94  2   4
Absolute      STY $4400     $8C  3   4
</PRE>
<P>
<P><FONT size=3D-1>Last Updated March 30, 2001.</FONT> =
</P></BODY></HTML>
